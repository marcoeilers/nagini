domain PyType {
    function typeof(r: Ref): PyType
    function issubtype(t1: PyType, t2: PyType):Bool
    function get_type_arg1(obj: Ref, index: Int): PyType
    function get_type_arg2(obj: Ref, index: Int, index2: Int): PyType
    function get_type_arg3(obj: Ref, index: Int, index2: Int, index3: Int): PyType
    function get_type_arg4(obj: Ref, index: Int, index2: Int, index3: Int, index4: Int): PyType
    function get_type_arg5(obj: Ref, index: Int, index2: Int, index3: Int, index4: Int, index5: Int): PyType
    function get_type_arg6(obj: Ref, index: Int, index2: Int, index3: Int, index4: Int, index5: Int, index6: Int): PyType
    function get_type_nargs0(r: Ref): Int
    function get_type_nargs1(r: Ref, index: Int): Int
    function get_type_nargs2(r: Ref, index: Int, index2: Int): Int
    function get_type_nargs3(r: Ref, index: Int, index2: Int, index3: Int): Int
    function get_type_nargs4(r: Ref, index: Int, index2: Int, index3: Int, index4: Int): Int
    function get_type_nargs5(r: Ref, index: Int, index2: Int, index3: Int, index4: Int, index5: Int): Int
    unique function tuple(): PyType
}

function tuple___create0__(): Ref
    ensures tuple___len__(result) == 0
    ensures typeof(result) == tuple()
    ensures get_type_nargs0(result) == 0

function tuple___create1__(arg0 : Ref, t0: PyType): Ref
    requires issubtype(typeof(arg0), t0)
    ensures tuple___len__(result) == 1 && tuple___getitem__(result, 0) == arg0
    ensures typeof(result) == tuple()
    ensures get_type_nargs0(result) == 1
    ensures get_type_arg1(result, 0) == t0

function tuple___create2__(arg0 : Ref, arg1: Ref, t0: PyType, t1: PyType): Ref
    requires issubtype(typeof(arg0), t0)
    requires issubtype(typeof(arg1), t1)
    ensures tuple___len__(result) == 2 && tuple___getitem__(result, 0) == arg0 && tuple___getitem__(result, 1) == arg1
    ensures typeof(result) == tuple()
    ensures get_type_nargs0(result) == 2
    ensures get_type_arg1(result, 0) == t0
    ensures get_type_arg1(result, 1) == t1

function tuple___create3__(arg0 : Ref, arg1: Ref, arg2: Ref, t0: PyType, t1: PyType, t2: PyType): Ref
    requires issubtype(typeof(arg0), t0)
    requires issubtype(typeof(arg1), t1)
    requires issubtype(typeof(arg2), t2)
    ensures tuple___len__(result) == 3 && tuple___getitem__(result, 0) == arg0 && tuple___getitem__(result, 1) == arg1 && tuple___getitem__(result, 2) == arg2
    ensures typeof(result) == tuple()
    ensures get_type_nargs0(result) == 3
    ensures get_type_arg1(result, 0) == t0
    ensures get_type_arg1(result, 1) == t1
    ensures get_type_arg1(result, 2) == t2

function tuple___create4__(arg0 : Ref, arg1: Ref, arg2: Ref, arg3: Ref, t0: PyType, t1: PyType, t2: PyType, t3: PyType): Ref
    requires issubtype(typeof(arg0), t0)
    requires issubtype(typeof(arg1), t1)
    requires issubtype(typeof(arg2), t2)
    requires issubtype(typeof(arg3), t3)
    ensures tuple___len__(result) == 4 && tuple___getitem__(result, 0) == arg0 && tuple___getitem__(result, 1) == arg1 && tuple___getitem__(result, 2) == arg2 && tuple___getitem__(result, 3) == arg3
    ensures typeof(result) == tuple()
    ensures get_type_nargs0(result) == 4
    ensures get_type_arg1(result, 0) == typeof(arg0) && get_type_arg1(result, 1) == typeof(arg1) && get_type_arg1(result, 2) == typeof(arg2) && get_type_arg1(result, 3) == typeof(arg3)
    ensures get_type_arg1(result, 0) == t0
    ensures get_type_arg1(result, 1) == t1
    ensures get_type_arg1(result, 2) == t2
    ensures get_type_arg1(result, 3) == t3

function tuple___create5__(arg0 : Ref, arg1: Ref, arg2: Ref, arg3: Ref, arg4: Ref, t0: PyType, t1: PyType, t2: PyType, t3: PyType, t4: PyType): Ref
    requires issubtype(typeof(arg0), t0)
    requires issubtype(typeof(arg1), t1)
    requires issubtype(typeof(arg2), t2)
    requires issubtype(typeof(arg3), t3)
    requires issubtype(typeof(arg4), t4)
    ensures tuple___len__(result) == 5 && tuple___getitem__(result, 0) == arg0 && tuple___getitem__(result, 1) == arg1 && tuple___getitem__(result, 2) == arg2 && tuple___getitem__(result, 3) == arg3 && tuple___getitem__(result, 4) == arg4
    ensures typeof(result) == tuple()
    ensures get_type_nargs0(result) == 5
    ensures get_type_arg1(result, 0) == t0
    ensures get_type_arg1(result, 1) == t1
    ensures get_type_arg1(result, 2) == t2
    ensures get_type_arg1(result, 3) == t3
    ensures get_type_arg1(result, 4) == t4

function tuple___create6__(arg0 : Ref, arg1: Ref, arg2: Ref, arg3: Ref, arg4: Ref, arg5: Ref, t0: PyType, t1: PyType, t2: PyType, t3: PyType, t4: PyType, t5: PyType): Ref
    requires issubtype(typeof(arg0), t0)
    requires issubtype(typeof(arg1), t1)
    requires issubtype(typeof(arg2), t2)
    requires issubtype(typeof(arg3), t3)
    requires issubtype(typeof(arg4), t4)
    requires issubtype(typeof(arg5), t5)
    ensures tuple___len__(result) == 6 && tuple___getitem__(result, 0) == arg0 && tuple___getitem__(result, 1) == arg1 && tuple___getitem__(result, 2) == arg2 && tuple___getitem__(result, 3) == arg3 && tuple___getitem__(result, 4) == arg4 && tuple___getitem__(result, 5) == arg5
    ensures typeof(result) == tuple()
    ensures get_type_nargs0(result) == 6
    ensures get_type_arg1(result, 0) == t0
    ensures get_type_arg1(result, 1) == t1
    ensures get_type_arg1(result, 2) == t2
    ensures get_type_arg1(result, 3) == t3
    ensures get_type_arg1(result, 4) == t4
    ensures get_type_arg1(result, 5) == t5

function tuple___sil_seq__(self: Ref): Seq[Ref]
    ensures |result| == tuple___len__(self)
    ensures forall i: Int :: i >= 0 && i < tuple___len__(self) ==> (result[i] == tuple___getitem__(self, i))
/*{
    let l == (tuple___len__(self)) in (len == 0 ? Seq[Ref]() :
    (len == 1 ? Seq(tuple___getitem__(self, 0)) :
    (len == 2 ? Seq(tuple___getitem__(self, 0), tuple___getitem__(self, 1)) :
    (len == 3 ? Seq(tuple___getitem__(self, 0), tuple___getitem__(self, 1), tuple___getitem__(self, 2)) :
    (len == 4 ? Seq(tuple___getitem__(self, 0), tuple___getitem__(self, 1), tuple___getitem__(self, 2), tuple___getitem__(self, 3)) :
    ())))))
}*/

function tuple___len__(self: Ref): Int
{
	get_type_nargs0(self)
}

function tuple___len__unknown(self: Ref): Int

function tuple___getitem__(self: Ref, key: Int): Ref
    requires key >= 0
    requires key < tuple___len__(self)
    ensures issubtype(typeof(result), get_type_arg1(self, key))

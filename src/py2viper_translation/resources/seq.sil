domain PyType {
    function typeof(r: Ref): PyType
    function issubtype(t1: PyType, t2: PyType):Bool
    unique function int(): PyType
    unique function bool(): PyType
    unique function range(): PyType
    unique function Sequence(): PyType
    function get_type_arg1(obj: Ref, index: Int): PyType
    function get_type_nargs0(obj: Ref): Int
}

function int___unbox__(self: Ref): Int

function Sequence___create__(prim: Seq[Ref], cont_type: PyType): Ref
    ensures typeof(result) == Sequence()
    ensures get_type_nargs0(result) == 1
    ensures get_type_arg1(result, 0) == cont_type
    ensures Sequence___unbox__(result) == prim

function Sequence___unbox__(box: Ref): Seq[Ref]
    requires issubtype(typeof(box), Sequence())
    //ensures __prim__Sequence___create__(result, get_type_arg1(result, 0)) == box

function Sequence___contains__(self: Ref, item: Ref): Bool
    requires issubtype(typeof(self), Sequence())
    ensures result == (item in Sequence___unbox__(self))
    ensures result ==> issubtype(typeof(item), get_type_arg1(self, 0))

function Sequence___getitem__(self: Ref, index: Ref): Ref
    requires issubtype(typeof(self), Sequence())
    requires issubtype(typeof(index), int())
    requires (int___unbox__(index) >= 0 && int___unbox__(index) < Sequence___len__(self))
    ensures result == Sequence___unbox__(self)[int___unbox__(index)]
    ensures issubtype(typeof(result), get_type_arg1(self, 0))

function Sequence___sil_seq__(self: Ref): Seq[Ref]
    requires issubtype(typeof(self), Sequence())
    ensures result == Sequence___unbox__(self)

function Sequence___len__(self: Ref): Int
    requires issubtype(typeof(self), Sequence())
    ensures result == |Sequence___unbox__(self)|

function Sequence_take(self: Ref, no: Int): Ref
    requires issubtype(typeof(self), Sequence())
    ensures result == Sequence___create__(Sequence___unbox__(self)[..no], get_type_arg1(self, 0))
    ensures get_type_arg1(result, 0) == get_type_arg1(self, 0)

function Sequence_drop(self: Ref, no: Int): Ref
    requires issubtype(typeof(self), Sequence())
    ensures result == Sequence___create__(Sequence___unbox__(self)[no..], get_type_arg1(self, 0))
    ensures get_type_arg1(result, 0) == get_type_arg1(self, 0)

function Sequence_update(self: Ref, index: Int, val: Ref): Ref
    requires issubtype(typeof(self), Sequence())
    ensures result == Sequence___create__(Sequence___unbox__(self)[index := val], get_type_arg1(self, 0))
    ensures get_type_arg1(result, 0) == get_type_arg1(self, 0)

function Sequence___add__(self: Ref, other: Ref): Ref
    requires issubtype(typeof(self), Sequence())
    requires issubtype(typeof(other), Sequence())
    requires get_type_arg1(self, 0) == get_type_arg1(other, 0)
    ensures result == Sequence___create__(Sequence___unbox__(self) ++ Sequence___unbox__(other), get_type_arg1(self, 0))
    ensures get_type_arg1(result, 0) == get_type_arg1(self, 0)

function Sequence___eq__(self: Ref, other: Ref): Bool
    requires issubtype(typeof(self), Sequence())
    requires issubtype(typeof(other), Sequence())
    requires get_type_arg1(self, 0) == get_type_arg1(other, 0)
    ensures result == (Sequence___unbox__(self) == Sequence___unbox__(other))
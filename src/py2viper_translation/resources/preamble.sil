field list_acc : Seq[Ref]

function eq_ref(a: Ref, b: Ref): Bool
{
    a == b
}

method list___init__() returns (res: Ref)
    ensures acc(res.list_acc)
    ensures res.list_acc == Seq[Ref]()
{
    assume false
}

function list___contains__(self: Ref, item: Ref): Bool
    requires acc(self.list_acc, 1/100)
    ensures result == (item in self.list_acc)

function list___bool__(self: Ref) : Bool
    requires acc(self.list_acc, 1/100)
    ensures result == (|self.list_acc| != 0)

function list___len__(self: Ref) : Int
    requires acc(self.list_acc, 1/100)
    ensures result == |self.list_acc|

function list___getitem__(self: Ref, key: Int): Ref
    requires acc(self.list_acc, 1/100)
    requires key >= 0
    requires key < list___len__(self)
    ensures result == self.list_acc[key]

method list___setitem__(self: Ref, key: Int, item: Ref) returns ()
    requires acc(self.list_acc)
    requires key >= 0
    requires key < list___len__(self)
    ensures acc(self.list_acc)
    ensures self.list_acc == old(self.list_acc)[key := item]
{
    assume false
}

method list_append(self: Ref, item: Ref) returns ()
    requires acc(self.list_acc)
    ensures acc(self.list_acc)
    ensures self.list_acc == old(self.list_acc) ++ Seq(item)
{
    assume false
}

function object___bool__(self: Ref) : Bool
    ensures result == (self != null)

function NoneType___bool__(self: Ref) : Bool
    ensures result == (self != null)

function bool___bool__(self: Bool) : Bool
    ensures result == self

function int___bool__(self: Int) : Bool
    ensures result == (self != 0)

field dict_acc : Set[Int]

method dict___init__() returns (res: Ref)
    ensures acc(res.dict_acc)
    ensures res.dict_acc == Set[Int]()
{
    assume false
}

function dict___contains__(self: Ref, item: Int) : Bool
    requires acc(self.dict_acc, 1/100)
    ensures result == (item in self.dict_acc)

function dict___bool__(self: Ref) : Bool
    requires acc(self.dict_acc, 1/100)
    ensures result == (|self.dict_acc| != 0)

method dict_keys(self: Ref) returns (res: Ref)
    requires acc(self.dict_acc, 1/100)
    ensures acc(self.dict_acc, 1/100)
    ensures acc(res.set_acc)
    ensures res.set_acc == self.dict_acc
{
    assume false
}

function dict___getitem__(self: Ref, key: Int) : Ref
    requires acc(self.dict_acc, 1/100)
    requires dict___contains__(self, key)

function dict_get(self: Ref, key: Int) : Ref
    requires acc(self.dict_acc, 1/100)
    ensures result == (dict___contains__(self, key) ? dict___getitem__(self,key) : null)

method dict___setitem__(self: Ref, key: Int, item: Ref) returns ()
    requires acc(self.dict_acc)
    ensures acc(self.dict_acc)
    ensures self.dict_acc == old(self.dict_acc) union Set(key)
    ensures dict___getitem__(self, key) == item
    ensures forall k : Int :: {dict___getitem__(self, k)} {old(dict___getitem__(self, k))}
            ((old(dict___contains__(self, k)) &&
                k != key)
                    ==>
                        (dict___contains__(self, k) &&
                        (dict___getitem__(self, k) == old(dict___getitem__(self, k)))
                        )
                        )
{
    assume false
}

field set_acc : Set[Int]

method set___init__() returns (res: Ref)
    ensures acc(res.set_acc)
    ensures res.set_acc == Set[Int]()
{
    assume false
}

function set___contains__(self: Ref, item: Int) : Bool
    requires acc(self.set_acc, 1/100)
    ensures result == (item in self.set_acc)

function set___bool__(self: Ref) : Bool
    requires acc(self.set_acc, 1/100)
    ensures result == (|self.set_acc| != 0)

method set_add(self: Ref, item: Int) returns ()
    requires acc(self.set_acc)
    ensures acc(self.set_acc)
    ensures self.set_acc == old(self.set_acc) union Set(item)
{
    assume false
}

method set_clear(self: Ref) returns ()
    requires acc(self.set_acc)
    ensures acc(self.set_acc)
    ensures self.set_acc == Set[Int]()
{
    assume false
}
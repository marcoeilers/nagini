field list_acc : Seq[Ref]

domain PyType {
    function typeof(r: Ref): PyType
    function issubtype(t1: PyType, t2: PyType):Bool
    function get_type_arg(r: Ref, i: Int): PyType
    unique function list(): PyType
}

method list___init__() returns (res: Ref)
    ensures acc(res.list_acc)
    ensures res.list_acc == Seq[Ref]()
    ensures typeof(res) == list()
{
    assume false
}

function list___contains__(self: Ref, item: Ref): Bool
    requires acc(self.list_acc, 1/100)
    ensures result == (item in self.list_acc)

function list___bool__(self: Ref) : Bool
    requires acc(self.list_acc, 1/100)
    ensures result == (|self.list_acc| != 0)

function list___len__(self: Ref) : Int
    requires acc(self.list_acc, 1/100)
    ensures result == |self.list_acc|

function list___getitem__(self: Ref, key: Int): Ref
    requires acc(self.list_acc, 1/100)
    requires key >= 0
    requires key < list___len__(self)
    ensures result == self.list_acc[key]

method list___setitem__(self: Ref, key: Int, item: Ref) returns ()
    requires acc(self.list_acc)
    requires key >= 0
    requires key < list___len__(self)
    ensures acc(self.list_acc)
    ensures self.list_acc == old(self.list_acc)[key := item]
{
    assume false
}

method list_append(self: Ref, item: Ref) returns ()
    requires acc(self.list_acc)
    ensures acc(self.list_acc)
    ensures self.list_acc == old(self.list_acc) ++ Seq(item)
{
    assume false
}

//predicate list_list(self: Ref) {
//    acc(self.list_acc) &&
//      forall i: Int :: ((i >= 0 && i < |self.list_acc|) ==>
//        issubtype(typeof(self.list_acc[i]), get_type_arg(self, 0))
//}
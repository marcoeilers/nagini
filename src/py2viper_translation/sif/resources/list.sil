domain FuncTriple[T, S ,R] {
	function ft_get1(t: FuncTriple[T, S, R]) : T
	function ft_get2(t: FuncTriple[T, S, R]) : S
	function ft_get3(t: FuncTriple[T, S, R]) : R
	function ft_create(a: T, b: S, c: R) : FuncTriple[T, S, R]
}

domain PyType {
    function typeof(r: Ref): PyType
    function issubtype(t1: PyType, t2: PyType):Bool
    function list(t: PyType): PyType
    function list_arg(t: PyType, i: Int): PyType
    unique function int(): PyType
}

field list_acc : Seq[Ref]
field list_acc_p : Seq[Ref]

method list___init__(__tl: Bool) returns (res: Ref, res_p: Ref, __new_tl: Bool)
    ensures acc(res.list_acc) && acc(res.list_acc_p)
    ensures res.list_acc == Seq[Ref]()
    ensures res.list_acc_p == Seq[Ref]()
    ensures typeof(res) == list(list_arg(typeof(res), 0))
    ensures res == res_p
    ensures !__tl ==> !__new_tl
{
    assume false
}

method list___setitem__(self: Ref, self_p: Ref,
                        key: Int, key_p: Int,
                        item: Ref, item_p: Ref,
                        __tl: Bool) returns (__new_tl: Bool)
    requires acc(self.list_acc) && acc(self_p.list_acc_p)
    requires key >= 0 && key_p >= 0
    requires key < |self.list_acc| && key_p < |self_p.list_acc_p|
    requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
    requires issubtype(typeof(self_p), list(list_arg(typeof(self_p), 0)))
    requires issubtype(typeof(item), list_arg(typeof(self), 0))
    requires issubtype(typeof(item_p), list_arg(typeof(self_p), 0))
    ensures acc(self.list_acc) && acc(self_p.list_acc_p)
    ensures self.list_acc == old(self.list_acc)[key := item]
    ensures self_p.list_acc_p == old(self_p.list_acc_p)[key_p := item_p]
    ensures (!__tl && key == key_p) ==> !__new_tl
{
    assume false
}

function list___getitem__(self: Ref, self_p: Ref,
                          key: Int, key_p: Int,
                          __tl: Bool): FuncTriple[Ref, Ref, Bool]
    requires acc(self.list_acc, wildcard) && acc(self_p.list_acc_p, wildcard)
    requires key >= 0 && key_p >= 0
    requires key < |self.list_acc| && key_p < |self_p.list_acc_p|
    requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
    requires issubtype(typeof(self_p), list(list_arg(typeof(self_p), 0)))
    ensures ft_get1(result) == self.list_acc[key]
    ensures ft_get2(result) == self_p.list_acc_p[key_p]
    ensures (!__tl && key == key_p) ==> !ft_get3(result)
{
    let __new_tl == (__tl || key != key_p) in
    ft_create(self.list_acc[key], self_p.list_acc_p[key_p], __new_tl)
}

function list___contains__(self: Ref, self_p: Ref, item: Ref, item_p: Ref,
                           __tl: Bool): FuncTriple[Bool, Bool, Bool]
    requires acc(self.list_acc, wildcard) && acc(self_p.list_acc_p, wildcard)
    requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
    requires issubtype(typeof(self_p), list(list_arg(typeof(self_p), 0)))
    ensures ft_get1(result) == (item in self.list_acc)
    ensures ft_get2(result) == (item_p in self_p.list_acc_p)
    ensures (!__tl && item == item_p) ==> !ft_get3(result)
{
    let __new_tl == (__tl || item != item_p) in
    ft_create(item in self.list_acc, item_p in self_p.list_acc_p, __new_tl)
}

method list_append(self: Ref, self_p: Ref,
                   item: Ref, item_p: Ref,
                   __tl: Bool) returns (__new_tl: Bool)
    requires acc(self.list_acc) && acc(self_p.list_acc_p)
    requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
    requires issubtype(typeof(self_p), list(list_arg(typeof(self_p), 0)))
    requires issubtype(typeof(item), list_arg(typeof(self), 0))
    requires issubtype(typeof(item_p), list_arg(typeof(self_p), 0))
    ensures acc(self.list_acc) && acc(self_p.list_acc_p)
    ensures self.list_acc == old(self.list_acc) ++ Seq(item)
    ensures self_p.list_acc_p == old(self_p.list_acc_p) ++ Seq(item_p)
    ensures !__tl ==> !__new_tl
{
    assume false
}
field list_acc: Seq[Ref]
field list_acc_p: Seq[Ref]

method list___init__(__tl: Bool) returns (res: Ref, res_p: Ref, __new_tl: Bool)
    ensures acc(res.list_acc) && acc(res.list_acc_p)
    ensures res.list_acc == Seq[Ref]()
    ensures res.list_acc_p == Seq[Ref]()
    ensures typeof(res) == list(list_arg(typeof(res), 0))
    ensures res == res_p
    ensures !__tl ==> !__new_tl
{
    assume false
}

method list___setitem__(self: Ref, self_p: Ref,
                        key: Int, key_p: Int,
                        item: Ref, item_p: Ref,
                        __tl: Bool) returns (__new_tl: Bool)
    requires acc(self.list_acc) && acc(self_p.list_acc_p)
    requires key >= 0 && key_p >= 0
    requires key < |self.list_acc| && key_p < |self_p.list_acc_p|
    requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
    requires issubtype(typeof(self_p), list(list_arg(typeof(self_p), 0)))
    requires issubtype(typeof(item), list_arg(typeof(self), 0))
    requires issubtype(typeof(item_p), list_arg(typeof(self_p), 0))
    ensures acc(self.list_acc) && acc(self_p.list_acc_p)
    ensures self.list_acc == old(self.list_acc)[key := item]
    ensures self_p.list_acc_p == old(self_p.list_acc_p)[key_p := item_p]
    ensures !__tl ==> !__new_tl
{
    assume false
}

function list___getitem__(self: Ref, self_p: Ref,
                          key: Ref, key_p: Ref,
                          __tl: Bool): FuncTriple[Ref, Ref, Bool]
    requires acc(self.list_acc, wildcard) && acc(self_p.list_acc_p, wildcard)
    requires issubtype(typeof(key), int()) && issubtype(typeof(key_p), int())
    requires int___unbox__(key) >= 0 && int___unbox__(key_p) >= 0
    requires int___unbox__(key) < |self.list_acc| && int___unbox__(key_p) < |self_p.list_acc_p|
    requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
    requires issubtype(typeof(self_p), list(list_arg(typeof(self_p), 0)))
    ensures ft_get1(result) == self.list_acc[int___unbox__(key)]
    ensures ft_get2(result) == self_p.list_acc_p[int___unbox__(key_p)]
    ensures !__tl ==> !ft_get3(result)
    ensures issubtype(typeof(ft_get1(result)), list_arg(typeof(self), 0))
    ensures issubtype(typeof(ft_get2(result)), list_arg(typeof(self_p), 0))

function list___contains__(self: Ref, self_p: Ref, item: Ref, item_p: Ref,
                           __tl: Bool): FuncTriple[Bool, Bool, Bool]
    requires acc(self.list_acc, wildcard) && acc(self_p.list_acc_p, wildcard)
    requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
    requires issubtype(typeof(self_p), list(list_arg(typeof(self_p), 0)))
    ensures ft_get1(result) == (item in self.list_acc)
    ensures ft_get2(result) == (item_p in self_p.list_acc_p)
    ensures !__tl ==> !ft_get3(result)

function list___len__(self: Ref, self_p: Ref, __tl: Bool) : FuncTriple[Int, Int, Bool]
    requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
    requires issubtype(typeof(self_p), list(list_arg(typeof(self_p), 0)))
    requires acc(self.list_acc, wildcard) && acc(self_p.list_acc_p, wildcard)
    ensures ft_get1(result) == |self.list_acc| && ft_get2(result) == |self_p.list_acc_p|
    ensures !__tl ==> !ft_get3(result)

method list_append(self: Ref, self_p: Ref,
                   item: Ref, item_p: Ref,
                   __tl: Bool) returns (__new_tl: Bool)
    requires acc(self.list_acc) && acc(self_p.list_acc_p)
    requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
    requires issubtype(typeof(self_p), list(list_arg(typeof(self_p), 0)))
    requires issubtype(typeof(item), list_arg(typeof(self), 0))
    requires issubtype(typeof(item_p), list_arg(typeof(self_p), 0))
    ensures acc(self.list_acc) && acc(self_p.list_acc_p)
    ensures self.list_acc == old(self.list_acc) ++ Seq(item)
    ensures self_p.list_acc_p == old(self_p.list_acc_p) ++ Seq(item_p)
    ensures !__tl ==> !__new_tl
{
    assume false
}
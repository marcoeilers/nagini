/*
 * Copyright (c) 2019 ETH Zurich
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

function object___bool__(self: Ref) : Bool
    decreases _
    ensures self == null ==> !result
    // We can't actually say that the result is true if self is not None, because
    // this is not the case for collections.
    ensures self != null ==> (let t == (typeof(self)) in ((!issubtype(t, list(list_arg(t, 0))) &&
                                                           !issubtype(t, set(set_arg(t, 0))) &&
                                                           !issubtype(t, dict(dict_arg(t, 0), dict_arg(t, 1)))) ==> result))

function NoneType___bool__(self: Ref) : Bool
    decreases _
    ensures self == null ==> !result

function bool___bool__(self: Ref) : Bool
    decreases _
    requires self != null ==> issubtype(typeof(self), bool())
    ensures self == null ==> !result
    ensures self != null ==> result == bool___unbox__(self)

function int___bool__(self: Ref) : Bool
    decreases _
    requires self != null ==> issubtype(typeof(self), int())
    ensures self == null ==> !result
    ensures self != null ==> result == (int___unbox__(self) != 0)

function __prim__int___box__(prim: Int): Ref
    decreases _
    ensures typeof(result) == int()
    ensures int___unbox__(result) == prim

function int___unbox__(box: Ref): Int
    decreases _
    requires issubtype(typeof(box), int())
    ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
    ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box

function __prim__bool___box__(prim: Bool): Ref
    decreases _
    ensures typeof(result) == bool()
    ensures bool___unbox__(result) == prim
    ensures int___unbox__(result) == (prim ? 1 : 0)

function bool___unbox__(box: Ref): Bool
    decreases _
    requires issubtype(typeof(box), bool())
    ensures __prim__bool___box__(result) == box

function int___eq__(self: Ref, other: Ref): Bool
    decreases _
    requires issubtype(typeof(self), int())
    requires issubtype(typeof(other), int())
    ensures result == int___unbox__(self) == int___unbox__(other)
    ensures result == object___eq__(self, other)


function bool___eq__(self: Ref, other: Ref): Bool
    decreases _
    requires issubtype(typeof(self), bool())
    requires issubtype(typeof(other), bool())
    ensures result == bool___unbox__(self) == bool___unbox__(other)
    ensures result == object___eq__(self, other)


function int___ge__(self: Int, other: Int): Bool
    decreases _
{
    self >= other
}

function int___gt__(self: Int, other: Int): Bool
    decreases _
{
    self > other
}

function int___le__(self: Int, other: Int): Bool
    decreases _
{
    self <= other
}

function int___lt__(self: Int, other: Int): Bool
    decreases _
{
    self < other
}

function int___add__(self: Int, other: Int): Int
    decreases _
{
    self + other
}

function int___sub__(self: Int, other: Int): Int
    decreases _
{
    self - other
}

function int___mul__(self: Int, other: Int): Int
    decreases _
{
    self * other
}

function int___floordiv__(self: Int, other: Int): Int
    decreases _
    requires other != 0
{
    self \ other
}

function int___div__(self: Int, other: Int): Ref
    decreases _
    requires other != 0
    ensures (self % other == 0) ==> (typeof(result) == int() && int___unbox__(result) == self \ other)
    ensures (self % other != 0) ==> typeof(result) == float()

function int___mod__(self: Int, other: Int): Int
    decreases _
    requires other != 0
{
    self % other
}

function int___int__(self: Ref): Ref
    decreases _
    requires issubtype(typeof(self), int())
    ensures result == self

domain __ObjectEquality {
    function object___eq__(Ref, Ref): Bool

    axiom {
        forall o1: Ref, o2: Ref, o3: Ref ::
            { object___eq__(o1, o2), object___eq__(o2, o3) }
            { object___eq__(o1, o2), object___eq__(o1, o3) }
            { object___eq__(o2, o3), object___eq__(o1, o3) }
            object___eq__(o1, o2) && object___eq__(o2, o3) ==> object___eq__(o1, o3)
    }

    axiom {
        forall o1: Ref, o2: Ref :: { object___eq__(o1, o2) }
            (object___eq__(o1, o2) == object___eq__(o2, o1)) &&
            (o1 == o2 ==> object___eq__(o1, o2)) &&
            (((o1 == null) != (o2 == null)) ==> !object___eq__(o1, o2))
    }

}

function Place___eq__(self: Ref, other: Ref): Bool
    decreases _
    ensures result == (self == other)

function object___cast__(typ: PyType, obj: Ref): Ref
    decreases _
    requires issubtype(typeof(obj), typ)
    ensures result == obj
    ensures issubtype(typeof(obj), typ)

function max(a: Ref, b: Ref): Int
    decreases _
    requires (issubtype(typeof(a), int()) && issubtype(typeof(b), int())) ||
             (issubtype(typeof(a), list(int())) && b == null)
    requires issubtype(typeof(a), list(int())) ==> acc(a.list_acc, 1/100) && list___len__(a) > 0
    ensures issubtype(typeof(a), int()) ==> result == ((int___unbox__(a) > int___unbox__(b)) ? int___unbox__(a) : int___unbox__(b))
    ensures issubtype(typeof(a), list(int())) ==> list___contains__(a, __prim__int___box__(result))

function min(a: Ref, b: Ref): Int
    decreases _
    requires (issubtype(typeof(a), int()) && issubtype(typeof(b), int())) ||
             (issubtype(typeof(a), list(int())) && b == null)
    requires issubtype(typeof(a), list(int())) ==>  acc(a.list_acc, 1/100) && list___len__(a) > 0
    ensures issubtype(typeof(a), int()) ==> result == ((int___unbox__(a) > int___unbox__(b)) ? int___unbox__(b) : int___unbox__(a))
    ensures issubtype(typeof(a), list(int())) ==> list___contains__(a, __prim__int___box__(result))

function abs(a: Int): Int
    decreases _
    ensures result == (a >= 0 ? a : -a)

method print(r: Ref)
    requires Low(r)
    requires LowEvent()
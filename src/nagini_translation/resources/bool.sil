/*
 * Copyright (c) 2019 ETH Zurich
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

function object___bool__(self: Ref) : Bool
    decreases _
    ensures self == null ==> !result
    // We can't actually say that the result is true if self is not None, because
    // this is not the case for collections.
    ensures self != null ==> (let t == (typeof(self)) in ((!issubtype(t, list(list_arg(t, 0))) &&
                                                           !issubtype(t, set(set_arg(t, 0))) &&
                                                           !issubtype(t, dict(dict_arg(t, 0), dict_arg(t, 1)))) ==> result))

function NoneType___bool__(self: Ref) : Bool
    decreases _
    ensures self == null ==> !result

function bool___bool__(self: Ref) : Bool
    decreases _
    requires self != null ==> issubtype(typeof(self), bool())
    ensures self == null ==> !result
    ensures self != null ==> result == bool___unbox__(self)

function int___bool__(self: Ref) : Bool
    decreases _
    requires self != null ==> issubtype(typeof(self), int())
    ensures self == null ==> !result
    ensures self != null ==> result == (int___unbox__(self) != 0)

function __prim__int___box__(prim: Int): Ref
    decreases _
    ensures typeof(result) == int()
    ensures int___unbox__(result) == prim

function int___unbox__(box: Ref): Int
    decreases _
    requires issubtype(typeof(box), int())
    ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
    ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box

function __prim__bool___box__(prim: Bool): Ref
    decreases _
    ensures typeof(result) == bool()
    ensures bool___unbox__(result) == prim
    ensures int___unbox__(result) == (prim ? 1 : 0)

function bool___unbox__(box: Ref): Bool
    decreases _
    requires issubtype(typeof(box), bool())
    ensures __prim__bool___box__(result) == box

function int___eq__(self: Ref, other: Ref): Bool
    decreases _
    requires issubtype(typeof(self), int())
    requires issubtype(typeof(other), int())
    ensures result == int___unbox__(self) == int___unbox__(other)
    ensures result == object___eq__(self, other)


function bool___eq__(self: Ref, other: Ref): Bool
    decreases _
    requires issubtype(typeof(self), bool())
    requires issubtype(typeof(other), bool())
    ensures result == bool___unbox__(self) == bool___unbox__(other)
    ensures result == object___eq__(self, other)


function int___ge__(self: Ref, other: Ref): Bool
    decreases _
    requires issubtype(typeof(self), int())
    requires issubtype(typeof(other), float())
{
    issubtype(typeof(other), int())
        ? int___unbox__(self) >= int___unbox__(other)
        : float___ge__(self, other)
}

function int___gt__(self: Ref, other: Ref): Bool
    decreases _
    requires issubtype(typeof(self), int())
    requires issubtype(typeof(other), float())
{
    issubtype(typeof(other), int())
        ? int___unbox__(self) > int___unbox__(other)
        : float___gt__(self, other)
}

function int___le__(self: Ref, other: Ref): Bool
    decreases _
    requires issubtype(typeof(self), int())
    requires issubtype(typeof(other), float())
{
    issubtype(typeof(other), int())
        ? int___unbox__(self) <= int___unbox__(other)
        : float___le__(self, other)
}

function int___lt__(self: Ref, other: Ref): Bool
    decreases _
    requires issubtype(typeof(self), int())
    requires issubtype(typeof(other), float())
{
    issubtype(typeof(other), int())
        ? int___unbox__(self) < int___unbox__(other)
        : float___lt__(self, other)
}

function int___add__(self: Int, other: Int): Int
    decreases _
{
    self + other
}

function int___sub__(self: Int, other: Int): Int
    decreases _
{
    self - other
}

function int___mul__(self: Int, other: Int): Int
    decreases _
{
    self * other
}

function int___floordiv__(self: Int, other: Int): Int
    decreases _
    requires other != 0
{
    self \ other
}

function int___div__(self: Int, other: Int): Ref
    decreases _
    requires @error("Divisor may be zero.")(other != 0)
    ensures (self % other == 0) ==> (typeof(result) == int() && int___unbox__(result) == self \ other)
    ensures (self % other != 0) ==> typeof(result) == float()

function int___mod__(self: Int, other: Int): Int
    decreases _
    requires other != 0
{
    self % other
}

function int___pos__(self: Ref): Ref
    decreases _
    requires issubtype(typeof(self), int())
    ensures result == self

function int___neg__(self: Ref): Ref
    decreases _
    requires issubtype(typeof(self), int())
    ensures result == __prim__int___box__(-int___unbox__(self))

function int___invert__(self: Ref): Ref
    decreases _
    requires issubtype(typeof(self), int())
    ensures result == __prim__int___box__(-(1 + int___unbox__(self)))

function int___int__(self: Ref): Ref
    decreases _
    requires issubtype(typeof(self), int())
    ensures result == self

domain __ObjectEquality {
    function object___eq__(Ref, Ref): Bool

    axiom {
        forall o1: Ref, o2: Ref, o3: Ref ::
            { object___eq__(o1, o2), object___eq__(o2, o3) }
            { object___eq__(o1, o2), object___eq__(o1, o3) }
            { object___eq__(o2, o3), object___eq__(o1, o3) }
            object___eq__(o1, o2) && object___eq__(o2, o3) ==> object___eq__(o1, o3)
    }

    axiom {
        forall o1: Ref, o2: Ref :: { object___eq__(o1, o2) }
            (object___eq__(o1, o2) == object___eq__(o2, o1)) &&
            (o1 == o2 ==> object___eq__(o1, o2)) &&
            (((o1 == null) != (o2 == null)) ==> !object___eq__(o1, o2))
    }

}

function Place___eq__(self: Ref, other: Ref): Bool
    decreases _
    ensures result == (self == other)

function object___cast__(typ: PyType, obj: Ref): Ref
    decreases _
    requires @error("Cast may not succeed.")issubtype(typeof(obj), typ)
    ensures result == obj
    ensures issubtype(typeof(obj), typ)

function max(a: Ref, b: Ref): Int
    decreases _
    requires (issubtype(typeof(a), int()) && issubtype(typeof(b), int())) ||
             (issubtype(typeof(a), list(int())) && b == null)
    requires issubtype(typeof(a), list(int())) ==> acc(a.list_acc, 1/100) && list___len__(a) > 0
    ensures issubtype(typeof(a), int()) ==> result == ((int___unbox__(a) > int___unbox__(b)) ? int___unbox__(a) : int___unbox__(b))
    ensures issubtype(typeof(a), list(int())) ==> list___contains__(a, __prim__int___box__(result))

function min(a: Ref, b: Ref): Int
    decreases _
    requires (issubtype(typeof(a), int()) && issubtype(typeof(b), int())) ||
             (issubtype(typeof(a), list(int())) && b == null)
    requires issubtype(typeof(a), list(int())) ==>  acc(a.list_acc, 1/100) && list___len__(a) > 0
    ensures issubtype(typeof(a), int()) ==> result == ((int___unbox__(a) > int___unbox__(b)) ? int___unbox__(b) : int___unbox__(a))
    ensures issubtype(typeof(a), list(int())) ==> list___contains__(a, __prim__int___box__(result))

function abs(a: Int): Int
    decreases _
    ensures result == (a >= 0 ? a : -a)

method print(r: Ref)
    requires Low(r)
    requires LowEvent()

method sorted(r: Ref) returns (rs: Ref)
    requires issubtype(typeof(r), list(int()))
    requires acc(r.list_acc, 1/1000)
    ensures issubtype(typeof(rs), list(int()))
    ensures acc(r.list_acc, 1/1000)
    ensures acc(rs.list_acc)
    ensures list___len__(rs) == list___len__(r)
    ensures __toMS(r.list_acc) == __toMS(rs.list_acc)
    ensures sum(r) == sum(rs)
    ensures forall i1: Int, i2: Int :: { rs.list_acc[i1], rs.list_acc[i2] } i1 >= 0 && i1 < i2 && i2 < list___len__(rs) ==>
            int___unbox__(list___getitem__(rs, __prim__int___box__(i1))) <= int___unbox__(list___getitem__(rs, __prim__int___box__(i2)))
    ensures list___len__(r) == 1 ==> rs.list_acc == r.list_acc
    ensures list___len__(r) > 1 ==> forall i: Int :: { r.list_acc[i] } i >= 0 && i < list___len__(r) ==> int___unbox__(list___getitem__(r, __prim__int___box__(i))) >= int___unbox__(list___getitem__(rs, __prim__int___box__(0)))
    ensures list___len__(r) > 1 ==> forall i: Int :: { r.list_acc[i] } i >= 0 && i < list___len__(r) ==> int___unbox__(list___getitem__(r, __prim__int___box__(i))) <= int___unbox__(list___getitem__(rs, __prim__int___box__(list___len__(r) - 1)))


function sum(r: Ref): Int
    requires issubtype(typeof(r), list(int()))
    requires acc(r.list_acc, 1/1000)
    ensures result == __sum(__seq_ref_to_seq_int(r.list_acc))

function __seq_ref_to_seq_int(sr: Seq[Ref]): Seq[Int]
    ensures |result| == |sr|
    ensures forall i: Int :: { result[i] } i >= 0 && i < |result| && issubtype(typeof(sr[i]), int()) ==>  result[i] == int___unbox__(sr[i])
    ensures sr == Seq() ==> result == Seq()
    ensures forall r: Ref :: {__seq_ref_to_seq_int(Seq(r))} issubtype(typeof(r), int()) ==> __seq_ref_to_seq_int(Seq(r)) == Seq(int___unbox__(r))
    ensures forall sr1: Seq[Ref], sr2: Seq[Ref] :: {__seq_ref_to_seq_int(sr1 ++ sr2)} __seq_ref_to_seq_int(sr1 ++ sr2) == __seq_ref_to_seq_int(sr1) ++ __seq_ref_to_seq_int(sr2)
    decreases _


domain __SumHelper[T$] {
    function __sum(s: Seq[Int]): Int

    axiom __sum_def_1 {
        __sum(Seq[Int]()) == 0
    }

    axiom __sum_def_2 {
        forall __t: Int :: { __sum(Seq(__t)) } __sum(Seq(__t)) == __t
    }

    axiom __sum_def_3 {
        forall __ss1: Seq[Int], __ss2: Seq[Int] :: { __sum(__ss1 ++ __ss2) } __sum(__ss1 ++ __ss2) == __sum(__ss1) + __sum(__ss2)
    }

    axiom __sum_def_4 {
        forall __ss1: Seq[Int], __ss2: Seq[Int] :: { __sum(__ss1), __sum(__ss2) } __toMS(__ss1) == __toMS(__ss2) ==> __sum(__ss1) == __sum(__ss2)
    }
}

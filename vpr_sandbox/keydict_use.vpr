import "./keydict_definition.vpr"

field string_val: Seq[Int]
field int_val: Int
field bool_val: Bool

function check_if_int_val_positive(__dict__: Ref, key: Ref): Bool
    requires issubtype(typeof(__dict__), dict(dict_arg(typeof(__dict__), 0), dict_arg(typeof(__dict__), 1)))
    requires acc(keydict___item__(__dict__, key).keydict_val, wildcard)
    requires keydict___contains__(__dict__, key)
    requires acc(keydict___getitem__(__dict__, key).int_val, wildcard)
    ensures result == keydict___getitem__(__dict__, key).int_val >= 0

method make_int_val_positive(__dict__: Ref, key: Ref)
    requires issubtype(typeof(__dict__), dict(dict_arg(typeof(__dict__), 0), dict_arg(typeof(__dict__), 1)))
    requires acc(keydict___item__(__dict__, key).keydict_val)
    requires keydict___contains__(__dict__, key)

    ensures acc(keydict___item__(__dict__, key).keydict_val)
    ensures keydict___contains__(__dict__, key)
    ensures acc(keydict___item__(__dict__, key).keydict_val.value.int_val)

    ensures keydict___item__(__dict__, key).keydict_val.value.int_val >= 0
{
    var my_int: Ref
    my_int := new(int_val)
    my_int.int_val := 100
    assume issubtype(typeof(key), dict_arg(typeof(__dict__), 0))            // !!!
    assume issubtype(typeof(my_int), dict_arg(typeof(__dict__), 1))         // !!!

    keydict___setitem__(__dict__, key, my_int)
}

function check_key1_and_key2_only(__dict__: Ref, key1: Ref, key2: Ref): Set[Ref]
    requires issubtype(typeof(__dict__), dict(dict_arg(typeof(__dict__), 0), dict_arg(typeof(__dict__), 1)))
    requires acc(keydict___item__(__dict__, key1).keydict_val, wildcard)
    requires acc(keydict___item__(__dict__, key2).keydict_val, wildcard)
    ensures result == keydict_keys_specific(__dict__, Set(key1, key2))


method main(keystring_1: Seq[Int], keystring_2: Seq[Int], keystring_3: Seq[Int], some_val1: Ref, some_val2: Ref, some_val3: Ref)
    requires acc(some_val1.string_val)
    requires acc(some_val2.int_val)
    requires acc(some_val3.bool_val)
    requires issubtype(typeof(some_val1), object())
    requires issubtype(typeof(some_val2), object())
    requires issubtype(typeof(some_val3), object())
    requires some_val1 != some_val2 && some_val1 != some_val3 && some_val2 != some_val3
    requires keystring_1 != keystring_2 && keystring_1 != keystring_3 && keystring_2 != keystring_3
{
    var __dict__: Ref := keydict___init__()
    inhale issubtype(typeof(__dict__), dict(object(), object()))
    var key1: Ref := string___box__(keystring_1)
    var key2: Ref := string___box__(keystring_2)
    var key3: Ref := string___box__(keystring_3) 

    // keydict == {}
    assert keydict___len__(__dict__) == 0
    assert !keydict___contains__(__dict__, key1)
    assert !keydict___contains__(__dict__, key2)
    assert !keydict___contains__(__dict__, key3)
    assert !(key1 in keydict_keys(__dict__))
    assert !(key2 in keydict_keys(__dict__))
    assert !(key3 in keydict_keys(__dict__))
    assert !(key1 in check_key1_and_key2_only(__dict__, key1, key2))
    assert !(key2 in check_key1_and_key2_only(__dict__, key1, key2))
    assert !(some_val1 in keydict_values(__dict__))
    assert !(some_val2 in keydict_values(__dict__))
    assert !(some_val3 in keydict_values(__dict__))
    

    // keydict == {key1: some_val1}
    assert issubtype(typeof(some_val1), object())
    assert issubtype(dict_arg(typeof(__dict__), 1), object())
    assert (issubtype(typeof(some_val1), dict_arg(typeof(__dict__), 1)))
    keydict___setitem__(__dict__, key1, some_val1)
    assert keydict___getitem__(__dict__, key1) == some_val1
    assert !keydict___contains__(__dict__, key2)
    assert !keydict___contains__(__dict__, key3)
    assert key1 in keydict_keys(__dict__)
    assert !(key2 in keydict_keys(__dict__))
    assert !(key3 in keydict_keys(__dict__))
    assert key1 in check_key1_and_key2_only(__dict__, key1, key2)
    assert !(key2 in check_key1_and_key2_only(__dict__, key1, key2))
    assert some_val1 in keydict_values(__dict__)
    assert !(some_val2 in keydict_values(__dict__))
    assert !(some_val3 in keydict_values(__dict__))

    // keydict == {key1: some_val1, key2: some_val2}
    keydict___setitem__(__dict__, key2, some_val2)
    assert keydict___getitem__(__dict__, key1) == some_val1
    assert keydict___getitem__(__dict__, key2) == some_val2
    assert !keydict___contains__(__dict__, key3)
    assert key1 in keydict_keys(__dict__)
    assert key2 in keydict_keys(__dict__)
    assert !(key3 in keydict_keys(__dict__))
    assert key1 in check_key1_and_key2_only(__dict__, key1, key2)
    assert key2 in check_key1_and_key2_only(__dict__, key1, key2)
    assert some_val1 in keydict_values(__dict__)
    assert some_val2 in keydict_values(__dict__)
    assert !(some_val3 in keydict_values(__dict__))

    // keydict == {key1: some_val1, key2: some_val2, key3: some_val3}
    keydict___setitem__(__dict__, key3, some_val3)
    assert keydict___getitem__(__dict__, key1) == some_val1
    assert keydict___getitem__(__dict__, key2) == some_val2
    assert keydict___getitem__(__dict__, key3) == some_val3
    assert key1 in keydict_keys(__dict__)
    assert key2 in keydict_keys(__dict__)
    assert key3 in keydict_keys(__dict__)
    assert key1 in check_key1_and_key2_only(__dict__, key1, key2)
    assert key2 in check_key1_and_key2_only(__dict__, key1, key2)
    assert some_val1 in keydict_values(__dict__)
    assert some_val2 in keydict_values(__dict__)
    assert some_val3 in keydict_values(__dict__)

    // keydict == {key1: some_val1, key2: 100, key3: some_val3}
    make_int_val_positive(__dict__, key2)
    assert keydict___getitem__(__dict__, key1) == some_val1
    assert check_if_int_val_positive(__dict__, key2)
    assert keydict___getitem__(__dict__, key3) == some_val3
    assert key1 in keydict_keys(__dict__)
    assert key2 in keydict_keys(__dict__)
    assert key3 in keydict_keys(__dict__)
    assert key1 in check_key1_and_key2_only(__dict__, key1, key2)
    assert key2 in check_key1_and_key2_only(__dict__, key1, key2)
    assert some_val1 in keydict_values(__dict__)
    assert some_val3 in keydict_values(__dict__)

    // assert keydict___len__(__dict__) == 3     // Assert might fail. Assertion keydict___len__(__dict__) == 3 might not hold.
}

